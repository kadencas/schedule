generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model companies {
  id                String              @id @default(uuid())
  name              String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @default(now()) @updatedAt
  custom_roles      custom_roles[]
  time_off_requests time_off_requests[]
  users             users[]
  work_shifts       work_shifts[]
}

model custom_roles {
  id          String    @id @default(uuid())
  name        String    @unique
  description String
  permissions Json      @default("{}")
  companyId   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
  companies   companies @relation(fields: [companyId], references: [id])
  users       users[]
}

model time_off_requests {
  id                                        String        @id @default(uuid())
  employeeId                                String
  managerId                                 String?
  companyId                                 String
  startDate                                 DateTime
  endDate                                   DateTime
  status                                    RequestStatus @default(PENDING)
  type                                      TimeOffType
  reason                                    String?
  createdAt                                 DateTime      @default(now())
  updatedAt                                 DateTime      @default(now()) @updatedAt
  companies                                 companies     @relation(fields: [companyId], references: [id])
  users_time_off_requests_employeeIdTousers users         @relation("time_off_requests_employeeIdTousers", fields: [employeeId], references: [id])
  users_time_off_requests_managerIdTousers  users?        @relation("time_off_requests_managerIdTousers", fields: [managerId], references: [id])
}

model users {
  id                            String              @id @default(uuid())
  email                         String              @unique
  name                          String
  role                          Role                @default(EMPLOYEE)
  companyId                     String?
  createdAt                     DateTime            @default(now())
  updatedAt                     DateTime            @default(now()) @updatedAt
  customRoleId                  String?
  passwordHash                  String?
  department                    String              @default("N/A")
  location                      String              @default("N/A")
  time_off_requests_as_employee time_off_requests[] @relation("time_off_requests_employeeIdTousers")
  time_off_requests_as_manager  time_off_requests[] @relation("time_off_requests_managerIdTousers")
  company                       companies?          @relation(fields: [companyId], references: [id])
  custom_roles                  custom_roles?       @relation(fields: [customRoleId], references: [id])
  work_shifts                   work_shifts[]
}

model work_shifts {
  id                String     @id @default(uuid())
  userId            String
  companyId         String
  shiftDate         DateTime
  startTime         DateTime
  endTime           DateTime
  isRecurring       Boolean    @default(false)
  recurrenceRule    String?
  recurrenceEndDate DateTime?
  notes             String?
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @default(now()) @updatedAt
  segments          segments[]
  companies         companies  @relation(fields: [companyId], references: [id])
  users             users      @relation(fields: [userId], references: [id])
}

model segments {
  id          String      @id @default(uuid())
  shiftId     String
  segmentType String
  location    String
  startTime   DateTime
  endTime     DateTime
  notes       String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @default(now()) @updatedAt
  work_shifts work_shifts @relation(fields: [shiftId], references: [id])
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}

enum Role {
  SUPER_ADMIN
  COMPANY_ADMIN
  MANAGER
  TEAM_LEAD
  EMPLOYEE
  CONTRACTOR
  INTERN
  PART_TIME
  REMOTE
}

enum TimeOffType {
  VACATION
  SICK
  PERSONAL
}
